"Valida los tipos de nivel"
enum Level{
    principiante
    intermedio
    avanzado
}

type Curso{
    _id: ID!
    title: String!
    teacher: String!
    description: String!
    topic: String!
    people: [Student]
    level: Level
}

interface Person{
    _id: ID!
    name: String!
    email: String!
}

type Student implements Person{
    _id: ID!
    name: String!
    email: String!
    avatar: String
}

type Monitor implements Person{
    _id: ID!
    name: String!
    email: String!
    phone: String
}

type Query {
    "Devuelve todos los cursos"
    getCourses:[Curso]
    "Devuelve un curso"
    getCourse(id: ID!):Curso
    "Devuelve todos los estudiantes"
    getPeople:[Person]
    "Devuelve un estudiante"
    getPerson(id: ID!):Person
}

input CourseInput{
    title: String
    teacher: String
    description: String!
    topic: String
    level: Level
}

input CourseEditInput{
    title: String
    teacher: String
    description: String
    topic: String
}

input PersonInput{
    name: String!
    email: String!
    phone: String
    avatar: String
}

input PersonEditInput{
    name: String
    email: String
    phone: String
    avatar: String
}

type Mutation{
    "Crea un curso"
    createCourse(input: CourseInput!): Curso
    "Edita un curso"
    editCourse(_id: ID!, input: CourseEditInput): Curso
    "Crea una persona"
    createPerson(input: PersonInput!): Person
    "Edita una persona"
    editPerson(_id: ID!, input: PersonEditInput): Person
    "Agrega una persona a un curso"
    addPeople(courseID:ID!, personID: ID!):Curso
    "Eliminar un item"
    deleteItem(_id: ID!, collection: String): String
}